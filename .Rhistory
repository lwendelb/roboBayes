#
# bocpd2_latency <- mapply(function(x1,x2){
#   ifelse(length(x2-x1)>=1,x2-x1,NA)
# },cp_info$bocpd2_cps,cp_info$bocpd2_det)
#bocpd_metrics <- get_metrics_from_cps(cp_info$bocpd_cps)
#bocpd_latency <- cp_info$bocpd_det - cp_info$bocpd_cps
return(c(metrics,list(tm=t1)))
# return(list(ccdc_TP=ccdc_metrics$TP,ccdc_FP=ccdc_metrics$FP,
#             bfast_TP=bfast_metrics$TP,bfast_FP=bfast_metrics$FP,
#             bocpd_metrics=bocpd_metrics,
#             bocpd2_metrics=bocpd2_metrics,
#             bocpd_TP=bocpd_metrics$TP,bocpd_FP=bocpd_metrics$FP,
#             bocpd2_TP=bocpd2_metrics$TP,bocpd2_FP=bocpd2_metrics$FP,
#             bfast_latency=bfast_latency,
#             bocpd_latency=bocpd_latency,
#             bocpd2_latency=bocpd2_latency,
#             bfast_latency_TP=bfast_metrics$latency_TP,
#             bocpd_latency_TP=bocpd_metrics$latency_TP,
#             bocpd2_latency_TP=bocpd2_metrics$latency_TP))
}
else{return(list(TP=NA,FP=NA,Precision=NA,Recall=NA,Fb=NA,latency=NA,tm=NA))}
})
return(thing)
})
}
get_summary <- function(metrics,getsd=F){
if(!getsd){
TP <- sapply(metrics,function(metricsi){
mean(sapply(metricsi,function(i){
i$TP
}),na.rm=T)
})
FP <- sapply(metrics,function(metricsi){
mean(sapply(metricsi,function(i){
i$FP
}),na.rm=T)
})
Fb <- sapply(metrics,function(metricsi){
mean(sapply(metricsi,function(i){
i$Fb
}),na.rm=T)
})
latency <- sapply(metrics,function(metricsi){
mean(sapply(metricsi,function(i){
i$latency
}),na.rm=T)
})
tm <- 1000*sapply(metrics,function(metricsi){
mean(sapply(metricsi,function(i){
i$tm
}),na.rm=T)/270
})
}else{
TP <- sapply(metrics,function(metricsi){
val <- sapply(metricsi,function(i){
i$TP
})
sd(val,na.rm=T)/length(val)
})
FP <- sapply(metrics,function(metricsi){
val <- sapply(metricsi,function(i){
i$FP
})
sd(val,na.rm=T)/length(val)
})
Fb <- sapply(metrics,function(metricsi){
val <- sapply(metricsi,function(i){
i$Fb
})
sd(val,na.rm=T)/length(val)
})
latency <- sapply(metrics,function(metricsi){
val <- sapply(metricsi,function(i){
i$latency
})
sd(val,na.rm=T)/length(val)
})
tm <- sapply(metrics,function(metricsi){
val <- sapply(metricsi,function(i){
i$tm
})
sd(1000*val/270,na.rm=T)/length(val)
})
}
return(cbind(TP,FP,Fb,latency,tm))
}
other_data <- list()
other_data <- list()
for(k in seq(1,11)){
fn <- load(paste("results/ss",k,"sensitivity_v3.RData",sep=""))
other_data <- c(other_data,list(all_results))
}
roboBayes_metrics <- get_other_metrics(other_data,atype="roboBayes")
roboBayes_mean <- get_summary(roboBayes_metrics,getsd=F)
roboBayes_sd <- get_summary(roboBayes_metrics,getsd=T)
roboBayes_mean
sim_settings <- matrix(c(0.5,1,20,0.5,0.1,5),nrow=11,ncol=6,byrow=T)
sim_settings[2,1] <- 0.4
sim_settings[3,2] <- 0.01
sim_settings[4,2] <- 100
sim_settings[5,3] <- 4
sim_settings[6,3] <- 50
sim_settings[7,4] <- 0.9
sim_settings[8,5] <- 0.5
sim_settings[9,5] <- 0.9
sim_settings[10,6] <- 1
sim_settings[11,6] <- 3
library(xtable)
all_mns <- data.frame(roboBayes_mean)
all_se <- data.frame(roboBayes_sd)
colnames(all_mns) <- c("TP","FP","F-score","Latency","Time (ms)")
colnames(all_se) <- c("TP","FP","F-score","Latency","Time (ms)")
inds<- expand.grid(1:nrow(all_mns),1:ncol(all_mns))
mn_table <- all_mns
sd_table <- all_se
tab <- cbind(sim_settings,matrix(c(sapply(1:nrow(inds),function(y){
paste(format(as.numeric(mn_table[inds[y,1],inds[y,2]]),nsmall=2,digits=1),
"\\textsubscript{",
format(as.numeric(sd_table[inds[y,1],inds[y,2]]),nsmall=2,digits=1),"}",sep="")
})),nrow(mn_table),ncol(mn_table)))
colnames(tab) <- c("$\\mu$","$\\Lambda_0$ scale","$\\nu_0$","$\\alpha$","$p_o$","L","TP","FP","F-score","Latency","Time (ms)")
cap <- "Average metrics (standard errors are in subscripts) for the simulation sensitivity
study applied to scenario 7.\\\\"
label <- "tab:sim_sensitivity_results"
print(xtable(tab, type = "latex",caption=cap,label=label),
sanitize.text.function = identity,
include.rownames = FALSE,
caption.placement = "top",
table.placement="H",
hline.after=c(-1,0),
file = paste("Plots/ss_sensitivity_metrics_table_v3.tex",sep=""),
)
get_metrics_from_cps <- function(cps,cpd,true_cp=181,L=5,p=0,n=270,tol=2,beta=1){
true_cp_tol <- sort(c(true_cp-(min(1,tol):tol),true_cp,true_cp+(min(1,tol):tol)))
true_cp_tol <- true_cp_tol[(true_cp_tol<=(n))&(true_cp_tol>(L+p))]
TP_count  <- 0*cps
FP_count <- 0*cps
latency_TP <- 0*cps
if(length(cps)>=1){
for(i in 1:length(cps)){
TP_count[i] <- any(cps[i]==true_cp_tol)
FP_count[i] <- all(cps[i]!=true_cp_tol)
}
if(any(TP_count>=1)){
latency_TP <- min((cpd-cps)[TP_count>=1])
}else{
latency_TP <- NA
}
TP <- as.numeric(sum(TP_count)>0)
FP <- sum(FP_count)
}else{
TP <- 0
FP <- 0
latency_TP <- NA
}
Precision <- (TP+1)/(TP+FP+1)
Recall <- (TP+1)/(length(true_cp)+1)
Fb <- (1+beta^2)*Precision*Recall/((beta^2)*Precision + Recall)
Ntot <- n-tol*2-1
return(list(TP=TP,FP=FP,Precision=Precision,Recall=Recall,Fb=Fb,latency_TP=latency_TP))
}
get_bocpdms_metrics <- function(data,truecps,mincp=12){
mapply(function(x,truecp){
if(any(names(x)=="rbocpdms" | names(x)=="bocpdms")){
if(any(names(x)=="rbocpdms")){
x1 <- x$rbocpdms
t1 <- x$rbocpdms_time
}
if(any(names(x)=="bocpdms")){
x1 <- x$bocpdms
t1 <- x$bocpdms_time
}
# first get cps
cps <- unique(unlist(x1))
# eliminate ones in the training period
if(any(cps<mincp)){
cps <- cps[cps>=mincp]
}
if(any(cps>(truecp+5))){
cps <- cps[cps<=(truecp+5)]
}
# get latency
cpd <- 0*cps
if(length(cps)>0){
for(cpi in 1:length(cps)){
cpd[cpi] <- which(sapply(x1,function(xi){
any(cps[cpi]==xi)
}))[1]+1
}
}
# now get TP and FP metrics
metrics <- get_metrics_from_cps(cps,cpd,true_cp=truecp,tol=5)
return(c(metrics,list(tm=t1)))
}else{return(list(TP=NA,FP=NA,Precision=NA,Recall=NA,Fb=NA,latency=NA,tm=NA))}
},x=data,truecp=truecps,SIMPLIFY = F)
}
get_other_metrics <- function(datai,truecps,atype){
thing <- mapply(function(cp_info,truecp){
if(any(names(cp_info)=="bocpd_cps")){
if(atype=="ccdc"){
metrics <- get_metrics_from_cps(cp_info$ccdc_cps,cp_info$ccdc_cps+2,true_cp=truecp,tol=5)
t1 <- cp_info$ccdc_time
}
if(atype=="roboBayes"){
metrics <- get_metrics_from_cps(cp_info$bocpd_cps,cp_info$bocpd_det,true_cp=truecp,tol=5)
t1 <- cp_info$bocpd_time
}
if(atype=="bocpd"){
metrics <- get_metrics_from_cps(cp_info$bocpd2_cps,cp_info$bocpd2_det,true_cp=truecp,tol=5)
t1 <- cp_info$bocpd2_time
}
return(c(metrics,list(tm=t1)))
}
else{return(list(TP=NA,FP=NA,Precision=NA,Recall=NA,Fb=NA,latency=NA,tm=NA))}
},cp_info=datai,truecp=truecps,SIMPLIFY = F)
return(thing)
}
get_summary <- function(metricsi,getsd=F){
if(!getsd){
TP <-  mean(sapply(metricsi,function(i){
i$TP
}),na.rm=T)
FP <- mean(sapply(metricsi,function(i){
i$FP
}),na.rm=T)
Fb <- mean(sapply(metricsi,function(i){
i$Fb
}),na.rm=T)
latency <-mean(sapply(metricsi,function(i){
i$latency
}),na.rm=T)
tm <- mean(length(dfl)*1000*sapply(metricsi,function(i){
i$tm
}),na.rm=T)/sum(sapply(dfl,function(x){nrow(x)}))
}else{
TP <- sd(sapply(metricsi,function(i){
i$TP
}),na.rm=T)
FP <- sd(sapply(metricsi,function(i){
i$FP
}),na.rm=T)
Fb <- sd(sapply(metricsi,function(i){
i$Fb
}),na.rm=T)
latency <- sd(sapply(metricsi,function(i){
i$latency
}),na.rm=T)
tm <- sd(length(dfl)*1000*sapply(metricsi,function(i){
i$tm
})/sum(sapply(dfl,function(x){nrow(x)})),na.rm=T)
}
return(cbind(TP,FP,Fb,latency,tm))
}
other_data <- list()
for(k in seq(1,13)){
fn <- load(paste("results/sensitivity",k,"myanmar.RData",sep=""))
other_data <- c(other_data,list(all_results))
}
truecps <- lapply(dfl,function(dfi){
dfi$ti[which(dfi$date_dist<=dfi$date)[1]]
})
metrics_roboBayes <- lapply(other_data,function(x){get_other_metrics(x,truecps,atype="roboBayes")})
roboBayes_mean <- sapply(metrics_roboBayes,function(x){get_summary(x)})
mn_table <- (roboBayes_mean)
mn_table <- apply(mn_table,c(1,2),function(x){
format(x,digits=1,nsmall=2)
})
load("results/myanmar_priors.Rdata")
sim_settings <- matrix(c(1,priors$nu,0.5,0.5,1,3),nrow=13,ncol=6,byrow=T)
sim_settings[2,1] <- 10
sim_settings[3,1] <- 0.1
sim_settings[4,1] <- 0.01
sim_settings[5,2] <- 3.01
sim_settings[6,2] <- 10
load("results/myanmar_priors.Rdata")
sim_settings <- matrix(c(1,priors$nu,0.5,0.5,1,3),nrow=13,ncol=6,byrow=T)
sim_settings[2,1] <- 10
sim_settings[3,1] <- 0.1
sim_settings[4,1] <- 0.01
sim_settings[5,2] <- 3.01
sim_settings[6,2] <- 10
sim_settings[7,3] <- 0.9
sim_settings[8,4] <- 0.1
sim_settings[9,4] <- 0.9
sim_settings[10,5] <- 0.1
sim_settings[11,5] <- 2
sim_settings[12,6] <- 5
sim_settings[13,6] <- 1
sim_settings[,2] <- format(sim_settings[,2],digits=2,nsmall=2)
tab <- cbind(sim_settings,t(mn_table))
colnames(tab) <- c("$\\Lambda_0$ scale","$\\nu_0$","$\\alpha$","$p_o$","$V_0$ scale","L","TP","FP","F-score","Latency","Time (ms)")
library(xtable)
cap <- c("Summary statistics comparing sensitivity of roboBayes to priors and tuning parameters of detection of the first change point in annotated Myanmar deforestation data.")
label <- "tab:myanmar_sensitivity_results"
print(xtable(tab, type = "latex",caption=cap,label=label),
sanitize.text.function = identity,
include.rownames = FALSE,
caption.placement = "top",
table.placement="H",
hline.after=c(-1,0), file = paste("myanmar_sensitivity_results_table_v3.tex",sep=""),
)
print(xtable(tab, type = "latex",caption=cap,label=label),
sanitize.text.function = identity,
include.rownames = FALSE,
caption.placement = "top",
table.placement="H",
hline.after=c(-1,0), file = paste("plots/myanmar_sensitivity_results_table_v3.tex",sep=""),
)
####### Figure 5: Myanmar results: (visualization data point 70)
# with outliers removed and change dates shown
load("code/paper plots/myanmar_default.RData")
load("code/paper plots/myanmar_priors.RData")
pit <- 1#73
dfi <- dfl[[pit]]
t <- dfi$t
period <- 365
# run bocpdod and pull out R
X <- cbind(1,sin(2*pi*t/period),cos(2*pi*t/period),(t-min(t))/(max(t)-min(t)))
Yi <- cbind(dfi$ndvi,dfi$swir2)
# pull out change point number
truecp <- dfi$ti[which(dfi$date_dist<=dfi$date)[1]]
piMine <- priors
bocpd_mod_o <- roboBayes::roboBayes(datapts = Yi,
covariates = X,
RoboBayes = NULL,
par_inits = piMine,
Lsearch = 15,
Lwindow = 8,
Lgroup=5,
lambda=100,
cpthresh = 0.8,
truncRmin = 300,
cptimemin = 12,
Lm = 8,
cp_delay = 3,
kt = 1,
pc=0.5,
alpha=0.9,
getR = TRUE,
getOutliers = TRUE,
getModels = FALSE)
# analyze using BOCPD
bocpd_mod_no <- roboBayes::roboBayes(datapts = Yi,
covariates = X,
RoboBayes = NULL,
par_inits = piMine,
Lsearch = 15,
Lwindow = 8,
Lgroup=5,
lambda=100,
cpthresh = 0.8,
truncRmin = 300,
cptimemin = 12,
Lm = 8,
cp_delay = 3,
kt = 1,
pc=0.5,
alpha=0.9,
getR = TRUE,
getOutliers = FALSE,
getModels = FALSE)
# put outlier results in dfir
dfio <- dfi[bocpd_mod_o$outliers,]
library(fields)
bocpd_mod <- bocpd_mod_o
s1=expand.grid(1:nrow(bocpd_mod$RFull),1:ncol(bocpd_mod$RFull))
thing1 <- data.frame(s1,R2=c(t(bocpd_mod$RFull)))
names(thing1) <- c("s1","s2","R2")
bocpd_mod <- bocpd_mod_no
s1=expand.grid(1:nrow(bocpd_mod$RFull),1:ncol(bocpd_mod$RFull))
thing2 <- data.frame(s1,R2=c(t(bocpd_mod$RFull)))
names(thing2) <- c("s1","s2","R2")
dfi$outliers_ndvi <- NA
dfi$outliers_ndvi[bocpd_mod$outliers] <- dfi$ndvi[bocpd_mod$outliers]
library(ggplot2)
# now plot clean data for comparison
bocpd_mod <- bocpd_mod_o
plot(dfi$date,dfi$swir2,ylim=c(0,1),xlab="Year",ylab="SWIR2")
abline(v=dfi$date[unique(c(bocpd_mod$cpInds))[-1]],col="red",lwd=2)
####### Figure 6: Myanmar run lengths
######## Do this one twice, on with outliers and one without
plt <- ggplot(thing2)
plt <- plt + theme_classic()
plt <- plt + scale_color_gradient(low="white", high="black",
name = "Run length \n probability \n")
plt <- plt + geom_point(aes(x=s1,y=s2,color=R2))
plt <- plt + xlab("Time point") + ylab("Run length")
plt
plt <- ggplot(thing1)
plt <- plt + theme_classic()
plt <- plt + scale_color_gradient(low="white", high="black",
name = "Run length \n probability \n")
plt <- plt + geom_point(aes(x=s1,y=s2,color=R2))
plt <- plt + xlab("Time point") + ylab("Run length")
plt
plt <- ggplot(thing1)
plt <- plt + theme_classic()
plt <- plt + scale_color_gradient(low="white", high="black",
name = "Run length \n probability \n")
plt <- plt + geom_point(aes(x=s1,y=s2,color=R2))
plt <- plt + xlab("Time point") + ylab("Run length")
plt
ggsave(filename="Plots/myanmar_rl_outliers.png",width=3,height=1,units="in",scale=1.2)
plt <- ggplot(thing1)
plt <- plt + theme_classic()
plt <- plt + scale_color_gradient(low="white", high="black",
name = "Run length \n probability \n")
plt <- plt + geom_point(aes(x=s1,y=s2,color=R2))
plt <- plt + xlab("Time point") + ylab("Run length")
plt
ggsave(filename="plots/myanmar_rl_outliers.png",width=3,height=1,units="in",scale=1.2)
ggsave(filename="plots/myanmar_rl_outliers.png",width=3,height=1,units="in",scale=1)
.
ggsave(filename="plots/myanmar_rl_outliers.png",width=3,height=1,units="in",scale=1.2)
?ggsave
ggsave(filename="plots/myanmar_rl_outliers.png",width=3,height=1,units="in",scale=1.2,dpi=600)
png("plots/myanmar_rl_outliers.png")
print(plt)
dev.off()
png("plots/myanmar_rl_outliers.png",width=3,height=1,units="in")
png("plots/myanmar_rl_outliers.png",width=3,height=1,units="in",res=300)
print(plt)
dev.off()
plt
ggsave(filename="plots/myanmar_rl_outliers.png",width=3,height=1,units="in",scale=1.2,dpi=10)
ggsave(filename="plots/myanmar_rl_outliers.png",width=3,height=1,units="in",scale=1.2,dpi=1000)
plt <- ggplot(thing1)
plt <- plt + theme_classic()
plt <- plt + scale_color_gradient(low="white", high="black",
name = "Run length \n probability \n")
plt <- plt + geom_point(aes(x=s1,y=s2,color=R2),size=0.1)
plt <- plt + xlab("Time point") + ylab("Run length")
plt
ggsave(filename="plots/myanmar_rl_outliers.png",width=3,height=1,units="in",scale=1.2,dpi=1000)
plt <- plt + geom_point(aes(x=s1,y=s2,color=R2),size=0.05)
plt <- plt + xlab("Time point") + ylab("Run length")
plt
ggsave(filename="plots/myanmar_rl_outliers.png",width=3,height=1,units="in",scale=1.2,dpi=1000)
plt <- ggplot(thing1)
plt <- plt + theme_classic()
plt <- plt + scale_color_gradient(low="white", high="black",
name = "Run length \n probability \n")
plt <- plt + geom_point(aes(x=s1,y=s2,color=R2),size=0.01)
plt <- plt + xlab("Time point") + ylab("Run length")
plt
ggsave(filename="plots/myanmar_rl_outliers.png",width=3,height=1,units="in",scale=1.2,dpi=1000)
ggsave(filename="plots/myanmar_rl_outliers.png",width=3,height=1,units="in",scale=1.6,dpi=1000)
ggsave(filename="plots/myanmar_rl_outliers.png",width=3,height=1,units="in",scale=1,dpi=1000)
ggsave(filename="plots/myanmar_rl_outliers.png",width=3,height=1,units="in",scale=2,dpi=1000)
ggsave(filename="plots/myanmar_rl_outliers.png",width=3,height=1.2,units="in",scale=2,dpi=1000)
plt <- ggplot(thing1)
plt <- plt + theme_classic()
plt <- plt + scale_color_gradient(low="white", high="black",
name = "Run length \n probability \n")
plt <- plt + geom_point(aes(x=s1,y=s2,color=R2),size=0.05)
plt <- plt + xlab("Time point") + ylab("Run length")
plt
ggsave(filename="plots/myanmar_rl_outliers.png",width=3,height=1.2,units="in",scale=2,dpi=1000)
plt <- plt + geom_point(aes(x=s1,y=s2,color=R2),size=0.1)
plt <- plt + xlab("Time point") + ylab("Run length")
plt
ggsave(filename="plots/myanmar_rl_outliers.png",width=3,height=1.2,units="in",scale=2,dpi=1000)
plt <- ggplot(thing1)
plt <- plt + theme_classic()
plt <- plt + scale_color_gradient(low="white", high="black",
name = "Run length \n probability \n")
plt <- plt + geom_point(aes(x=s1,y=s2,color=R2),size=1)
plt <- plt + xlab("Time point") + ylab("Run length")
plt
ggsave(filename="plots/myanmar_rl_outliers.png",width=3,height=1.2,units="in",scale=2,dpi=1000)
plt <- ggplot(thing1)
plt <- plt + theme_classic()
plt <- plt + scale_color_gradient(low="white", high="black",
name = "Run length \n probability \n")
plt <- plt + geom_point(aes(x=s1,y=s2,color=R2),size=0.5)
plt <- plt + xlab("Time point") + ylab("Run length")
plt
ggsave(filename="plots/myanmar_rl_outliers.png",width=3,height=1.2,units="in",scale=2,dpi=1000)
plt <- ggplot(thing1)
plt <- plt + theme_classic()
plt <- plt + scale_color_gradient(low="white", high="black",
name = "Run length \n probability \n")
plt <- plt + geom_point(aes(x=s1,y=s2,color=R2),size=0.4)
plt <- plt + xlab("Time point") + ylab("Run length")
plt
ggsave(filename="plots/myanmar_rl_outliers.png",width=3,height=1.2,units="in",scale=2,dpi=1000)
plt <- ggplot(thing1)
plt <- plt + theme_classic()
plt <- plt + scale_color_gradient(low="white", high="black",
name = "Run length \n probability \n")
plt <- plt + geom_point(aes(x=s1,y=s2,color=R2),size=0.3)
plt <- plt + xlab("Time point") + ylab("Run length")
plt
ggsave(filename="plots/myanmar_rl_outliers.png",width=3,height=1.2,units="in",scale=2,dpi=1000)
####### Figure 6: Myanmar run lengths
######## Do this one twice, on with outliers and one without
plt <- ggplot(thing2)
plt <- plt + theme_classic()
plt <- plt + scale_color_gradient(low="white", high="black",
name = "Run length \n probability \n")
plt <- plt + geom_point(aes(x=s1,y=s2,color=R2),size=0.3)
plt <- plt + xlab("Time point") + ylab("Run length")
plt
ggsave(filename="plots/myanmar_rl.png",width=3,height=1.2,units="in",scale=2,dpi=1000)
plt <- ggplot(thing1)
plt <- plt + theme_classic()
plt <- plt + scale_color_gradient(low="white", high="black",
name = "Run length \n probability \n")
plt <- plt + geom_point(aes(x=s1,y=s2,color=R2),size=0.3)
plt <- plt + xlab("Time point") + ylab("Run length")
plt
ggsave(filename="plots/myanmar_rl_outliers.png",width=3,height=1.2,units="in",scale=2,dpi=1000)
