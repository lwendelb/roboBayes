ifelse(qa==0,T,F)
ifelse(qa_df==0,T,F)
qa %in% 1
qa_df %in% 1
(qa_df %in% 1)*qa_df
qa_df[qa_df %in% 1]
qa_df[!(qa_df %in% 1)]
qa_df[!(qa_df %in% 1)] <- NA
qa_df
?sweep
load("C:/Users/ljwendel/Downloads/test.Rdata")
index
array(signal_scale)
array(signal_scale,c(1,2,3))
?array
domain_filter <- function(signals,index){
domain_filter <- function(signals,index){
## Signal options: NDVI SWIR2 Low High Soil Veg
signals_all <- c("ndvi","swir2","low","high","soil","veg")
# check the location of present signals
signals_present <- match(signal_names,signals_all)
# signal bounds
signal_min <- c(0,0,-Inf,0,0,0,0)
signal_max <- c(Inf,1,Inf,1,1,1,1)
# get data dimension
d <- length(signals_present)
# bound present signals
signals_bounded <- lapply(1:d,function(i){
(signals[,,i]>=signal_min[signals_present][i]) & (signals[,,i]<=signal_max[signals_present][i])
})
}
signal_scaling <- function(signals){
## Signal options: NDVI SWIR2 Low High Soil Veg
signals_all <- c("qa","ndvi","swir2","low","high","soil","veg")
# scaling behavior for each signal
signal_scale_factor <- c(1,1,1e4,1e4,1e4,1e4,1e4)
# check the location of present signals
signals_present <- match(signal_names,signals_all)
# get data dimension
d <- length(signals_present)
# scale present signals
signals_scaled <- lapply(1:d,function(i){
signals[,,i]/signal_scale_factor[signals_present][i]
})
return(signals_scaled)
}
signals <- signal_scaling(data_cube)
signals
signal_scaling <- function(signals,index){
## Signal options: NDVI SWIR2 Low High Soil Veg
signals_all <- c("qa","ndvi","swir2","low","high","soil","veg")
# scaling behavior for each signal
signal_scale_factor <- c(1,1,1e4,1e4,1e4,1e4,1e4)
# check the location of present signals
signals_present <- match(index,signals_all)
# get data dimension
d <- length(signals_present)
# scale present signals
signals_scaled <- lapply(1:d,function(i){
signals[,,i]/signal_scale_factor[signals_present][i]
})
return(signals_scaled)
}
signals <- signal_scaling(data_cube)
signals <- signal_scaling(data_cube,index)
signals
domain_filter <- function(signals,index){
## Signal options: NDVI SWIR2 Low High Soil Veg
signals_all <- c("ndvi","swir2","low","high","soil","veg")
# check the location of present signals
signals_present <- match(signal_names,signals_all)
# signal bounds
signal_min <- c(0,0,-Inf,0,0,0,0)
signal_max <- c(Inf,1,Inf,1,1,1,1)
# get data dimension
d <- length(signals_present)
# bound present signals
signals_bounded <- lapply(1:d,function(i){
(signals[,,i]>=signal_min[signals_present][i]) & (signals[,,i]<=signal_max[signals_present][i])
})
}
domain_filter <- function(signals,index){
## Signal options: NDVI SWIR2 Low High Soil Veg
signals_all <- c("ndvi","swir2","low","high","soil","veg")
# check the location of present signals
signals_present <- match(signal_names,signals_all)
# signal bounds
signal_min <- c(0,0,-Inf,0,0,0,0)
signal_max <- c(Inf,1,Inf,1,1,1,1)
# get data dimension
d <- length(signals_present)
# bound present signals
signals_bounded <- lapply(1:d,function(i){
(signals[,,i]>=signal_min[signals_present][i]) & (signals[,,i]<=signal_max[signals_present][i])
})
return(signals_bounded)
}
domain_filter(signals)
domain_filter(signals,index = )
domain_filter(signals,index = index)
domain_filter <- function(signals,index){
## Signal options: NDVI SWIR2 Low High Soil Veg
signals_all <- c("ndvi","swir2","low","high","soil","veg")
# check the location of present signals
signals_present <- match(index,signals_all)
# signal bounds
signal_min <- c(0,0,-Inf,0,0,0,0)
signal_max <- c(Inf,1,Inf,1,1,1,1)
# get data dimension
d <- length(signals_present)
# bound present signals
signals_bounded <- lapply(1:d,function(i){
(signals[,,i]>=signal_min[signals_present][i]) & (signals[,,i]<=signal_max[signals_present][i])
})
return(signals_bounded)
}
domain_filter(signals,index = index)
dim(signals)
signals
head(signals)
dim(as.array(signals))
signal_scaling <- function(signals,index){
## Signal options: NDVI SWIR2 Low High Soil Veg
signals_all <- c("qa","ndvi","swir2","low","high","soil","veg")
# scaling behavior for each signal
signal_scale_factor <- c(1,1,1e4,1e4,1e4,1e4,1e4)
# check the location of present signals
signals_present <- match(index,signals_all)
# get data dimension
d <- length(signals_present)
# scale present signals
signals_scaled <- as.array(lapply(1:d,function(i){
signals[,,i]/signal_scale_factor[signals_present][i]
}))
return(signals_scaled)
}
signal_scaling <- function(signals,index){
## Signal options: NDVI SWIR2 Low High Soil Veg
signals_all <- c("qa","ndvi","swir2","low","high","soil","veg")
# scaling behavior for each signal
signal_scale_factor <- c(1,1,1e4,1e4,1e4,1e4,1e4)
# check the location of present signals
signals_present <- match(index,signals_all)
# get data dimension
d <- length(signals_present)
# scale present signals
signals_scaled <- as.array(lapply(1:d,function(i){
signals[,,i]/signal_scale_factor[signals_present][i]
}))
return(signals_scaled)
}
signals <- signal_scaling(data_cube,index)
dim(signals)
signal_scaling <- function(signals,index){
## Signal options: NDVI SWIR2 Low High Soil Veg
signals_all <- c("qa","ndvi","swir2","low","high","soil","veg")
# scaling behavior for each signal
signal_scale_factor <- c(1,1,1e4,1e4,1e4,1e4,1e4)
# check the location of present signals
signals_present <- match(index,signals_all)
# get data dimension
d <- length(signals_present)
# scale present signals
signals_scaled <- array(lapply(1:d,function(i){
signals[,,i]/signal_scale_factor[signals_present][i]
}),dim(signals))
return(signals_scaled)
}
signals <- signal_scaling(data_cube,index)
dim(signals)
plot(signals[1,,1])
signals[1,,1]
signal_scaling <- function(signals,index){
## Signal options: NDVI SWIR2 Low High Soil Veg
signals_all <- c("qa","ndvi","swir2","low","high","soil","veg")
# scaling behavior for each signal
signal_scale_factor <- c(1,1,1e4,1e4,1e4,1e4,1e4)
# check the location of present signals
signals_present <- match(index,signals_all)
# get data dimension
d <- length(signals_present)
# scale present signals
signals_scaled <- array(sapply(1:d,function(i){
signals[,,i]/signal_scale_factor[signals_present][i]
}),dim(signals))
return(signals_scaled)
}
signals <- signal_scaling(data_cube,index)
signals[1,,1]
plot(signals[1,,1])
plot(signals[1,,2])
signal_scaling <- function(signals,index){
## Signal options: NDVI SWIR2 Low High Soil Veg
signals_all <- c("qa","ndvi","swir2","low","high","soil","veg")
# scaling behavior for each signal
signal_scale_factor <- c(1,1,1e4,1e4,1e4,1e4,1e4)
# check the location of present signals
signals_present <- match(index,signals_all)
# get data dimension
d <- length(signals_present)
# scale present signals
signals_scaled <- array(sapply(1:d,function(i){
signals[,,i]/signal_scale_factor[signals_present][i]
}),dim(signals))
return(signals_scaled)
}
domain_filter <- function(signals,index){
## Signal options: NDVI SWIR2 Low High Soil Veg
signals_all <- c("ndvi","swir2","low","high","soil","veg")
# check the location of present signals
signals_present <- match(index,signals_all)
# signal bounds
signal_min <- c(0,0,-Inf,0,0,0,0)
signal_max <- c(Inf,1,Inf,1,1,1,1)
# get data dimension
d <- length(signals_present)
# bound present signals
signals_bounded <- array(sapply(1:d,function(i){
(signals[,,i]>=signal_min[signals_present][i]) & (signals[,,i]<=signal_max[signals_present][i])
}),dim(signals))
return(signals_bounded)
}
domain_filter(signals,index = )
domain_filter(signals,index = index)
domain_filter <- function(signals,index){
## Signal options: NDVI SWIR2 Low High Soil Veg
signals_all <- c("ndvi","swir2","low","high","soil","veg")
# check the location of present signals
signals_present <- match(index,signals_all)
# signal bounds
signal_min <- c(0,0,-Inf,0,0,0,0)
signal_max <- c(Inf,1,Inf,1,1,1,1)
# get data dimension
d <- length(signals_present)
# bound present signals
signals_bounded <- array(sapply(1:d,function(i){
(signals[,,i]>=signal_min[signals_present][i]) & (signals[,,i]<=signal_max[signals_present][i])
}),dim(signals))
return(signals[signals_bounded])
}
signal_scaling(data_cube,index)
signals <- signal_scaling(data_cube,index)
domain_filter(signals)
domain_filter(signals,index)
signals2 <- domain_filter(signals,index)
dim(signals2)
signal_scaling <- function(signals,index){
## Signal options: NDVI SWIR2 Low High Soil Veg
signals_all <- c("qa","ndvi","swir2","low","high","soil","veg")
# scaling behavior for each signal
signal_scale_factor <- c(1,1,1e4,1e4,1e4,1e4,1e4)
# check the location of present signals
signals_present <- match(index,signals_all)
# get data dimension
d <- length(signals_present)
# scale present signals
signals_scaled <- array(sapply(1:d,function(i){
signals[,,i]/signal_scale_factor[signals_present][i]
}),dim(signals))
return(signals_scaled)
}
domain_filter <- function(signals,index){
## Signal options: NDVI SWIR2 Low High Soil Veg
signals_all <- c("ndvi","swir2","low","high","soil","veg")
# check the location of present signals
signals_present <- match(index,signals_all)
# signal bounds
signal_min <- c(0,0,-Inf,0,0,0,0)
signal_max <- c(Inf,1,Inf,1,1,1,1)
# get data dimension
d <- length(signals_present)
# bound present signals
signals_bounded <- array(sapply(1:d,function(i){
(signals[,,i]>=signal_min[signals_present][i]) & (signals[,,i]<=signal_max[signals_present][i])
}),dim(signals))
return(signals[signals_bounded])
}
signals <- signal_scaling(data_cube,index)
dim(signals)
domain_filter(signals,index)
## Signal options: NDVI SWIR2 Low High Soil Veg
signals_all <- c("ndvi","swir2","low","high","soil","veg")
# check the location of present signals
signals_present <- match(index,signals_all)
# signal bounds
signal_min <- c(0,0,-Inf,0,0,0,0)
signal_max <- c(Inf,1,Inf,1,1,1,1)
# get data dimension
d <- length(signals_present)
signals
dim(signals)
dim(signals_bounded)
# bound present signals
signals_bounded <- array(sapply(1:d,function(i){
(signals[,,i]>=signal_min[signals_present][i]) & (signals[,,i]<=signal_max[signals_present][i])
}),dim(signals))
dim(signals_bounded)
domain_filter <- function(signals,index){
## Signal options: NDVI SWIR2 Low High Soil Veg
signals_all <- c("ndvi","swir2","low","high","soil","veg")
# check the location of present signals
signals_present <- match(index,signals_all)
# signal bounds
signal_min <- c(0,0,-Inf,0,0,0,0)
signal_max <- c(Inf,1,Inf,1,1,1,1)
# get data dimension
d <- length(signals_present)
# bound present signals
signals_bounded <- array(sapply(1:d,function(i){
(signals[,,i]>=signal_min[signals_present][i]) & (signals[,,i]<=signal_max[signals_present][i])
}),dim(signals))
signals[!signals_bounded] <- NA
return(signals)
}
domain_filter(signals)
domain_filter(signals,index)
dim(domain_filter(signals,index))
s2 <- domain_filter(signals,index)
plot(s2[1,1])
plot(s2[1,,1])
quality_filter <- function(signals,qa,signal_names){
# Check if qa is good
qa_mask <- ifelse(qa %in% c(0))
# Expand qa to array
qa_array <- array(qa_mask,dim(signals))
# apply qa mask to signals
signals_filtered <- signals
signals_filtered[!qa_array] <- NA
return(signals_filtered)
}
signal_scaling <- function(signals,index){
## Signal options: NDVI SWIR2 Low High Soil Veg
signals_all <- c("qa","ndvi","swir2","low","high","soil","veg")
# scaling behavior for each signal
signal_scale_factor <- c(1,1,1e4,1e4,1e4,1e4,1e4)
# check the location of present signals
signals_present <- match(index,signals_all)
# get data dimension
d <- length(signals_present)
# scale present signals
signals_scaled <- array(sapply(1:d,function(i){
signals[,,i]/signal_scale_factor[signals_present][i]
}),dim(signals))
return(signals_scaled)
}
domain_filter <- function(signals,index){
## Signal options: NDVI SWIR2 Low High Soil Veg
signals_all <- c("qa","ndvi","swir2","low","high","soil","veg")
# check the location of present signals
signals_present <- match(index,signals_all)
# signal bounds
signal_min <- c(0,0,-Inf,0,0,0,0)
signal_max <- c(Inf,1,Inf,1,1,1,1)
# get data dimension
d <- length(signals_present)
# bound present signals
signals_bounded <- array(sapply(1:d,function(i){
(signals[,,i]>=signal_min[signals_present][i]) & (signals[,,i]<=signal_max[signals_present][i])
}),dim(signals))
signals[!signals_bounded] <- NA
return(signals)
}
## Signal options: NDVI SWIR2 Low High Soil Veg
signals_all <- c("ndvi","swir2","low","high","soil","veg")
# check the location of present signals
signals_present <- match(index,signals_all)
signals_present
index
signals_all
## Signal options: NDVI SWIR2 Low High Soil Veg
signals_all <- c("qa","ndvi","swir2","low","high","soil","veg")
# check the location of present signals
signals_present <- match(index,signals_all)
signals_present
# pull out qa
qa <- signals[,,match("qa",index)]
qa
# Check if qa is good
qa_mask <- ifelse(qa %in% c(0))
# Check if qa is good
qa_mask <- ifelse(qa %in% c(0))
# Check if qa is good
qa_mask <- ifelse(qa %in% c(0),T,F)
qa_mask
# Expand qa to array
qa_array <- array(qa_mask,dim(signals))
qa_array[1,,]
qa_array[,,1]
qa_array[,1,]
signal_scaling <- function(signals,index){
## Signal options: NDVI SWIR2 Low High Soil Veg
signals_all <- c("qa","ndvi","swir2","low","high","soil","veg")
# scaling behavior for each signal
signal_scale_factor <- c(1,1,1e4,1e4,1e4,1e4,1e4)
# check the location of present signals
signals_present <- match(index,signals_all)
# get data dimension
d <- length(signals_present)
# scale present signals
signals_scaled <- array(sapply(1:d,function(i){
signals[,,i]/signal_scale_factor[signals_present][i]
}),dim(signals))
return(signals_scaled)
}
domain_filter <- function(signals,index){
## Signal options: NDVI SWIR2 Low High Soil Veg
signals_all <- c("qa","ndvi","swir2","low","high","soil","veg")
# check the location of present signals
signals_present <- match(index,signals_all)
# signal bounds
signal_min <- c(0,0,-Inf,0,0,0,0)
signal_max <- c(Inf,1,Inf,1,1,1,1)
# get data dimension
d <- length(signals_present)
# bound present signals
signals_bounded <- array(sapply(1:d,function(i){
(signals[,,i]>=signal_min[signals_present][i]) & (signals[,,i]<=signal_max[signals_present][i])
}),dim(signals))
signals[!signals_bounded] <- NA
return(signals)
}
quality_filter <- function(signals,signal_names){
## Signal options: NDVI SWIR2 Low High Soil Veg
signals_all <- c("qa","ndvi","swir2","low","high","soil","veg")
# check the location of present signals
signals_present <- match(index,signals_all)
# pull out qa
qa <- signals[,,match("qa",index)]
# Check if qa is good
qa_mask <- ifelse(qa %in% c(0),T,F)
# Expand qa to array
qa_array <- array(qa_mask,dim(signals))
# apply qa mask to signals
signals_filtered <- signals
signals_filtered[!qa_array] <- NA
return(signals_filtered)
}
quality_filter <- function(signals,index){
## Signal options: NDVI SWIR2 Low High Soil Veg
signals_all <- c("qa","ndvi","swir2","low","high","soil","veg")
# check the location of present signals
signals_present <- match(index,signals_all)
# pull out qa
qa <- signals[,,match("qa",index)]
# Check if qa is good
qa_mask <- ifelse(qa %in% c(0),T,F)
# Expand qa to array
qa_array <- array(qa_mask,dim(signals))
# apply qa mask to signals
signals_filtered <- signals
signals_filtered[!qa_array] <- NA
return(signals_filtered)
}
quality_filter(domain_filter(signal_scaling(data_cube,index),index),index)
df <- quality_filter(domain_filter(signal_scaling(data_cube,index),index),index)
plot(df[,1])
plot(df[,,1])
plot(df[1,,1])
plot(df[1,,2])
plot(df[1,,3])
plot(df[1,,4])
quality_filter <- function(signals,index){
## Signal options: NDVI SWIR2 Low High Soil Veg
signals_all <- c("qa","ndvi","swir2","low","high","soil","veg")
# check the location of present signals
signals_present <- match(index,signals_all)
# pull out qa
qa <- signals[,,match("qa",index)]
# Check if qa is good
qa_mask <- ifelse(qa %in% c(0),T,F)
# Expand qa to array
qa_array <- array(qa_mask,dim(signals))
# put qa back in
qa_array[,,match("qa",index)] <- qa
# apply qa mask to signals
signals_filtered <- signals
signals_filtered[!qa_array] <- NA
return(signals_filtered)
}
df <- quality_filter(domain_filter(signal_scaling(data_cube,index),index),index)
plot(df[1,,2])
plot(df[1,,3])
diff(hls_sorted)
diff(hls_dates)
sort.int(dates)
sort.int(hls_dates)
sort.int(hls_dates,index.return = T)
newdates <- sort.int(dates,index.return = T)
dates <- hls_dates
dates
newdates <- sort.int(dates,index.return = T)
newdates$ix
install.packages("roboBayes_1.0.tar.gz")
install.packages("roboBayes_1.0.tar.gz",repos=NULL,type="source")
setwd("~/roboBayes_paper/roboBayes")
install.packages("roboBayes_1.0.tar.gz",repos=NULL,type="source")
library(RcppDist)
install.packages("RccpDist")
install.packages("RcppArmadillo")
install.packages("Rcpp")
install.packages("roboBayes_1.0.tar.gz",repos=NULL,type="source")
load("RcppDist")
install.packages("RcppDist")
library(RcppDist)
install.packages("roboBayes_1.0.tar.gz",repos=NULL,type="source")
library(Rcpp)
install.packages("roboBayes_1.0.tar.gz",repos=NULL,type="source")
install.packages("Rtools")
?version
R.version()
R.Version()
write('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', file = "~/.Renviron", append = TRUE)
